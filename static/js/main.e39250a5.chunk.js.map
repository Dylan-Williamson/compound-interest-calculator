{"version":3,"sources":["components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","props","handleInitialChange","e","value","parseInt","target","setState","initial","handleRateChange","rate","handleGoalChange","goal","calculate","count","sum","state","trueRate","calculated","bind","onChange","this","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAkFeA,E,kDA/EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgBVC,oBAAsB,SAACC,GACnB,IAAMC,EAAQC,SAASF,EAAEG,OAAOF,OAChC,EAAKG,SAAS,CAAEC,QAASJ,KAnBV,EAsBnBK,iBAAmB,SAACN,GAChB,IAAMC,EAAQC,SAASF,EAAEG,OAAOF,OAChC,EAAKG,SAAS,CAAEG,KAAMN,KAxBP,EA2BnBO,iBAAmB,SAACR,GAChB,IAAMC,EAAQC,SAASF,EAAEG,OAAOF,OAChC,EAAKG,SAAS,CAAEK,KAAMR,KA7BP,EAgCnBS,UAAY,WAQR,IAPA,IAAIC,EAAQ,EAERC,EADUV,SAAS,EAAKW,MAAMR,SAG9BS,EADOZ,SAAS,EAAKW,MAAMN,MAAM,IAChB,EACjBE,EAAOP,SAAS,EAAKW,MAAMJ,MAExBG,EAAMH,GACTE,IACAC,GAAUE,EAGd,EAAKV,SAAS,CACVW,WAAYJ,KA3ChB,EAAKE,MAAQ,CACTF,MAAO,EACPN,QAAS,EACTE,KAAM,GACNE,KAAM,EACNM,WAAY,GAGhB,EAAKhB,oBAAsB,EAAKA,oBAAoBiB,KAAzB,gBAC3B,EAAKV,iBAAmB,EAAKA,iBAAiBU,KAAtB,gBACxB,EAAKR,iBAAmB,EAAKA,iBAAiBQ,KAAtB,gBACxB,EAAKN,UAAY,EAAKA,UAAUM,KAAf,gBAdF,E,0CAkDnB,WACI,OACI,qCACI,8DAGA,uDAEQ,uBANZ,KAOM,uBAAOC,SAAWC,KAAKnB,oBAAsBE,MAAQiB,KAAKL,MAAMR,UAAkB,uBAAK,uBACzF,kDAEQ,uBAVZ,KAWM,uBAAOY,SAAWC,KAAKZ,iBAAmBL,MAAQiB,KAAKL,MAAMN,OAAe,uBAAK,uBACnF,yCAEQ,uBAdZ,KAeM,uBAAOU,SAAWC,KAAKV,iBAAmBP,MAAQiB,KAAKL,MAAMJ,OAAe,uBAAK,uBACnF,wBAAQU,QAAUD,KAAKR,UAAvB,uBAGA,oDACkD,IAA1BQ,KAAKL,MAAME,WAAmB,GAAKG,KAAKL,MAAME,qB,GAzE7DK,aCWVC,E,4JAPb,WACE,OACE,cAAC,EAAD,Q,GAJYD,aCQHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e39250a5.chunk.js","sourcesContent":["import {Component} from 'react'\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            count: 0,\n            initial: 0,\n            rate: 10,\n            goal: 0,\n            calculated: 0\n        };\n\n        this.handleInitialChange = this.handleInitialChange.bind(this)\n        this.handleRateChange = this.handleRateChange.bind(this)\n        this.handleGoalChange = this.handleGoalChange.bind(this)\n        this.calculate = this.calculate.bind(this);\n    };\n\n    handleInitialChange = (e) => {\n        const value = parseInt(e.target.value);\n        this.setState({ initial: value })\n    }\n\n    handleRateChange = (e) => {\n        const value = parseInt(e.target.value);\n        this.setState({ rate: value })\n    }\n\n    handleGoalChange = (e) => {\n        const value = parseInt(e.target.value);\n        this.setState({ goal: value })\n    }\n\n    calculate = () => {\n        let count = 0;\n        let initial = parseInt(this.state.initial);\n        let sum = initial;\n        let rate = parseInt(this.state.rate)/100;\n        let trueRate = (rate+1)\n        let goal = parseInt(this.state.goal);\n\n        while (sum < goal) {\n            count ++; // 1\n            sum = sum*trueRate; // 5500\n        }\n        \n        this.setState({\n            calculated: count\n        })\n    }\n\n    render() {\n        return(\n            <>\n                <h1>\n                    Compound Interest Calculator\n                </h1>\n                <label>\n                    Initial Investment\n                </label><br/>\n                $ <input onChange={ this.handleInitialChange } value={ this.state.initial }></input><br/><br/>\n                <label>\n                    Interest Rate\n                </label><br/>\n                % <input onChange={ this.handleRateChange } value={ this.state.rate }></input><br/><br/>\n                <label>\n                    Goal\n                </label><br/>\n                $ <input onChange={ this.handleGoalChange } value={ this.state.goal }></input><br/><br/>\n                <button onClick={ this.calculate }>\n                    Calculate\n                </button>\n                <h1>\n                    Trades Necessary: { this.state.calculated === 0 ? \"\" : this.state.calculated }\n                </h1>\n            </>\n        )\n    }\n}\n\nexport default Calculator;","import './App.css';\nimport { Component } from 'react'\nimport Calculator from './components/Calculator'\n\nclass App extends Component {\n\n  render(){\n    return(\n      <Calculator />\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}